// Code generated by mockery v2.44.1. DO NOT EDIT.

package sync

import (
	config "github.com/lovelaze/nebula-sync/internal/config"
	mock "github.com/stretchr/testify/mock"
)

// Target is an autogenerated mock type for the Target type
type Target struct {
	mock.Mock
}

type Target_Expecter struct {
	mock *mock.Mock
}

func (_m *Target) EXPECT() *Target_Expecter {
	return &Target_Expecter{mock: &_m.Mock}
}

// FullSync provides a mock function with given fields:
func (_m *Target) FullSync() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FullSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Target_FullSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FullSync'
type Target_FullSync_Call struct {
	*mock.Call
}

// FullSync is a helper method to define mock.On call
func (_e *Target_Expecter) FullSync() *Target_FullSync_Call {
	return &Target_FullSync_Call{Call: _e.mock.On("FullSync")}
}

func (_c *Target_FullSync_Call) Run(run func()) *Target_FullSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Target_FullSync_Call) Return(_a0 error) *Target_FullSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Target_FullSync_Call) RunAndReturn(run func() error) *Target_FullSync_Call {
	_c.Call.Return(run)
	return _c
}

// ManualSync provides a mock function with given fields: syncSettings
func (_m *Target) ManualSync(syncSettings *config.SyncSettings) error {
	ret := _m.Called(syncSettings)

	if len(ret) == 0 {
		panic("no return value specified for ManualSync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.SyncSettings) error); ok {
		r0 = rf(syncSettings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Target_ManualSync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManualSync'
type Target_ManualSync_Call struct {
	*mock.Call
}

// ManualSync is a helper method to define mock.On call
//   - syncSettings *config.SyncSettings
func (_e *Target_Expecter) ManualSync(syncSettings interface{}) *Target_ManualSync_Call {
	return &Target_ManualSync_Call{Call: _e.mock.On("ManualSync", syncSettings)}
}

func (_c *Target_ManualSync_Call) Run(run func(syncSettings *config.SyncSettings)) *Target_ManualSync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.SyncSettings))
	})
	return _c
}

func (_c *Target_ManualSync_Call) Return(_a0 error) *Target_ManualSync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Target_ManualSync_Call) RunAndReturn(run func(*config.SyncSettings) error) *Target_ManualSync_Call {
	_c.Call.Return(run)
	return _c
}

// NewTarget creates a new instance of Target. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTarget(t interface {
	mock.TestingT
	Cleanup(func())
}) *Target {
	mock := &Target{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
